{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAUC,SAASC,cAAc,SACjCC,EAAgBF,SAASC,cAAc,kBACvCE,EAAeH,SAASC,cAAc,iBACtCG,EAAiBJ,SAASC,cAAc,mBA6B9C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,GACFF,EAAQ,CAAEH,WAAUC,UAEtBG,EAAO,CAAEJ,WAAUC,S,GAClBA,E,IAnCPR,EAAQgB,iBAAiB,UAEzB,SAAsBC,GACpBA,EAAEC,iBAOF,IALA,IAAMC,EAAQC,SAASjB,EAAckB,OAC/BC,EAAOF,SAAShB,EAAaiB,OAC7BE,EAASH,SAASf,EAAegB,OACnCG,EAAeL,EAEVM,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAChCnB,EAAcmB,EAAGD,GACdE,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBoB,EAAA9B,GAAS+B,OAAOC,QACd,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAGjDwB,OAAM,SAAAL,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBoB,EAAA9B,GAAS+B,OAAOI,QACd,sBAAqCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAGjDgB,GAAgBF,EAElBL,EAAEiB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formRef = document.querySelector('.form');\nconst inputDelayRef = document.querySelector('[name=\"delay\"]');\nconst inputStepRef = document.querySelector('[name=\"step\"]');\nconst inputAmountRef = document.querySelector('[name=\"amount\"]');\n\nformRef.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  const delay = parseInt(inputDelayRef.value);\n  const step = parseInt(inputStepRef.value);\n  const amount = parseInt(inputAmountRef.value);\n  let currentDelay = delay;\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    currentDelay += step;\n  }\n  e.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formRef","document","querySelector","$ce04d3a99e08e73b$var$inputDelayRef","$ce04d3a99e08e73b$var$inputStepRef","$ce04d3a99e08e73b$var$inputAmountRef","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","delay1","parseInt","value","step","amount","currentDelay","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.0f27e368.js.map"}